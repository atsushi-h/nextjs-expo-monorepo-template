name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Optional: Allow Claude to run specific commands
          # allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*)"
          # PR作成に必要なコマンドを許可する
          allowed_tools: |
            Bash(pnpm install),
            Bash(pnpm run build),
            Bash(pnpm run test*),
            Bash(pnpm run lint*),
            Bash(pnpm fix),
            Bash(pnpm check),
            Bash(pnpm check-types),
            Bash(gh pr*),
            Bash(gh issue*),
            Bash(gh auth*),
            Bash(git checkout -b *),
            Bash(git checkout main),
            Bash(git branch*),
            Bash(git add .),
            Bash(git add *),
            Bash(git commit -m *),
            Bash(git push origin HEAD),
            Bash(git push -u origin *),
            Bash(git pull origin main),
            Bash(git pull origin *),
            Bash(git status),
            Bash(git diff*),
            Bash(git log*),
            Bash(git remote*),
            Bash(git fetch*)
          
          # Optional: Add custom instructions for Claude to customize its behavior for your project
          # custom_instructions: |
          #   Follow our coding standards
          #   Ensure all new code has tests
          #   Use TypeScript for new files
          custom_instructions: |
            Follow detailed guidelines in CLAUDE.md, especially:
            - "GitHub Actions と PR作成" section for PR creation workflow
            - "コミットメッセージ規則" for Conventional Commits
            - "ブランチルール" for branch naming conventions
            
            CRITICAL: Always use `gh pr create` command to create actual PRs.
            Never just provide PR creation URLs.
            
            When creating PRs, prefer simpler command formats to avoid permission issues.
            For multi-line PR bodies, create the content first, then use it in the command.