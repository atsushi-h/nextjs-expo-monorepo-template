name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Optional: Allow Claude to run specific commands
          # allowed_tools: "Bash(npm install),Bash(npm run build),Bash(npm run test:*),Bash(npm run lint:*)"
          # PR作成に必要なコマンドを許可する
          allowed_tools: |
            Bash(pnpm install),
            Bash(pnpm run build),
            Bash(pnpm run test*),
            Bash(pnpm run lint*),
            Bash(pnpm fix),
            Bash(pnpm check),
            Bash(pnpm check-types),
            Bash(gh pr create*),
            Bash(gh pr list),
            Bash(gh pr view*),
            Bash(git checkout*),
            Bash(git branch*),
            Bash(git add*),
            Bash(git commit*),
            Bash(git push*),
            Bash(git pull),
            Bash(git status),
            Bash(git diff*),
            Bash(git log*)
          
          # Optional: Add custom instructions for Claude to customize its behavior for your project
          # custom_instructions: |
          #   Follow our coding standards
          #   Ensure all new code has tests
          #   Use TypeScript for new files
          custom_instructions: |
            Follow our coding standards in CLAUDE.md
            Ensure all new code has tests
            Use TypeScript for new files
            
            When implementing features or fixes from issues:
            1. Create a new branch following our naming convention
            2. Make necessary changes
            3. Run tests and quality checks
            4. Commit with Conventional Commits format
            5. Push the branch
            6. Create PR using: gh pr create --title "<type>: <description> (#<issue>)" --body "<detailed description>"
            
            IMPORTANT: Always use `gh pr create` command to create actual PRs, not just generate URLs.
            Do NOT just provide a PR creation URL - actually execute the PR creation.
            
            PR body should include:
            - Summary of changes
            - Test results
            - Related issue reference (Closes #XXX)
            
            Example PR creation command:
            gh pr create \
              --title "feat: Add user authentication (#123)" \
              --body "## Summary\nImplemented user authentication feature.\n\n## Changes\n- Added login/logout functionality\n- Implemented JWT tokens\n- Added auth middleware\n\n## Tests\n- [x] Unit tests added\n- [x] Integration tests pass\n- [x] Manual testing completed\n\n## Related Issue\nCloses #123"
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test
